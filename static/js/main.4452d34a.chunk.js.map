{"version":3,"sources":["Components/PatientMarker.js","Components/Patient.js","App.js","serviceWorker.js","index.js"],"names":["PatientMarkers","i","position","this","props","patientData","lat","lng","Marker","Popup","name","address","verifyDate","note","markers","Date","length","getTime","targetDate","push","renderMarker","renderAllMarkers","React","Component","Patient","className","onClick","patientName","App","handleOnChange","percentage","date","percentageIntoDate","setState","progress","handlePlay","console","log","isPlaying","handlePause","dateIntoPercentage","startDateInMS","state","startDate","currentDateInMS","currentDate","centerPos","currentPatient","fetch","then","res","json","data","sort","a","b","Map","center","zoom","TileLayer","url","attribution","PatientMarker","slice","patientList","handleClick","patient","fetchPatientInfo","interval","setInterval","tick","clearInterval","renderMap","renderCurrentPatient","renderPatientList","min","max","value","tooltip","orientation","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4452d34a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Marker, Popup} from 'react-leaflet';\r\n\r\nclass PatientMarkers extends React.Component {\r\n    renderMarker(i) {\r\n        const position = [this.props.patientData[i].lat, this.props.patientData[i].lng];\r\n\r\n        return (\r\n            <Marker position={position}>\r\n                <Popup>\r\n                    <b>Tên: </b> {this.props.patientData[i].name} <br/>\r\n                    <b>Địa chỉ: </b> {this.props.patientData[i].address} <br/>\r\n                    <b>Ngày phát hiện: </b> {this.props.patientData[i].verifyDate} <br/>\r\n                    <b>Ghi chú: </b> {this.props.patientData[i].note} <br/>\r\n                </Popup>\r\n            </Marker>\r\n        );\r\n    }\r\n\r\n    renderAllMarkers() {\r\n        let markers = [];\r\n        let verifyDate = new Date();\r\n        const patientData = this.props.patientData;\r\n\r\n        for (let i = 0; i < patientData.length; i++) {\r\n            verifyDate = new Date(patientData[i].verifyDate);\r\n\r\n            if (verifyDate.getTime() < this.props.targetDate) {\r\n                markers.push(this.renderMarker(i));\r\n            }\r\n        }\r\n\r\n        return markers;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.renderAllMarkers()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PatientMarkers;","import React from 'react';\r\n\r\nfunction Patient(props) {\r\n    return (\r\n        <li>\r\n            <button className='btn-patient' onClick={props.onClick}>\r\n                {props.patientName}\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Patient;","import React from 'react';\r\nimport './App.css';\r\nimport { render } from 'react-dom'\r\nimport { Map, TileLayer } from 'react-leaflet'\r\nimport PatientMarkers from './Components/PatientMarker'\r\nimport Patient from './Components/Patient'\r\nimport Slider from 'react-rangeslider'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        patientData: [],\r\n        centerPos: [10.776530, 106.700981],\r\n        currentPatient: null,\r\n        progress: 100,\r\n        startDate: new Date(2019, 12, 8),\r\n        currentDate: new Date(),\r\n        targetDate: new Date(),\r\n        isPlaying: false,\r\n    };\r\n  }\r\n\r\n  fetchPatientInfo() {\r\n    fetch('https://cors-anywhere.herokuapp.com/https://maps.vnpost.vn/apps/covid19/api/patientapi/list')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({\r\n          patientData: json.data.sort((a,b) => (new Date(a.verifyDate).getTime()) > (new Date(b.verifyDate).getTime()))\r\n        });\r\n      });\r\n  }\r\n\r\n  renderMap() {\r\n    let targetDate = this.percentageIntoDate(this.state.progress);\r\n\r\n    const map = (\r\n      <Map center={this.state.centerPos} zoom={13} className='item1'>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n        <PatientMarkers\r\n          patientData = {this.state.patientData}\r\n          targetDate = {targetDate}\r\n        />\r\n      </Map>\r\n    );\r\n\r\n    return map;\r\n  }\r\n\r\n  renderPatientList() {\r\n    const patientData = this.state.patientData.slice();\r\n    const percentage = this.state.progress;\r\n\r\n    let patientList = [];\r\n    let targetDate = this.percentageIntoDate(percentage);\r\n    let verifyDate = new Date();\r\n\r\n    for (let i = 0; i < patientData.length; i++) {\r\n      verifyDate = new Date(patientData[i].verifyDate);\r\n\r\n      if (verifyDate < targetDate) {\r\n        patientList.push(\r\n          <Patient\r\n            patientName={patientData[i].name}\r\n            onClick={() => this.handleClick(patientData[i])}\r\n            />\r\n        )\r\n      }\r\n    }\r\n\r\n    return patientList;\r\n  }\r\n\r\n  handleClick(patient) {\r\n    this.setState({\r\n      centerPos: [patient.lat, patient.lng],\r\n      currentPatient: patient,\r\n    })\r\n  }\r\n\r\n  renderCurrentPatient() {\r\n    const patient = this.state.currentPatient;\r\n\r\n    if (this.state.currentPatient != null) {\r\n      return (\r\n        <div>\r\n          <b>Tên: </b> {patient.name} <br/>\r\n          <b>Địa chỉ: </b> {patient.address} <br/>\r\n          <b>Ngày phát hiện: </b> {patient.verifyDate} <br/>\r\n          <b>Ghi chú: </b> {patient.note} <br/>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <b>Tên: </b> <span> </span> <br/>\r\n          <b>Địa chỉ: </b> <span> </span> <br/>\r\n          <b>Ngày phát hiện: </b> <span> </span> <br/>\r\n          <b>Ghi chú: </b> <span> </span> <br/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  handleOnChange = (percentage) => {\r\n    let date  = this.percentageIntoDate();\r\n\r\n    this.setState({\r\n      progress: percentage,\r\n      targetDate: date,\r\n    })\r\n  }\r\n\r\n  handlePlay = () => {\r\n    console.log(\"play\")\r\n\r\n    this.setState({\r\n      isPlaying: true,\r\n      progress: 0,\r\n    })\r\n  }\r\n\r\n  handlePause = () => {\r\n    console.log(\"pause\")\r\n    this.setState({\r\n      isPlaying: false,\r\n    })\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.isPlaying) {\r\n      this.setState({\r\n        progress: this.state.progress + 1,\r\n      })\r\n    }\r\n\r\n    if (this.state.progress >= 100) {\r\n      this.setState({\r\n        progress: 100,\r\n        isPlaying: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchPatientInfo();\r\n    this.interval = setInterval(() => this.tick(), 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  dateIntoPercentage = (date) => {\r\n    let startDateInMS = this.state.startDate.getTime();\r\n    let currentDateInMS = this.state.currentDate.getTime();\r\n\r\n    let targetDateInMS = date.getTime();\r\n    let percentage = ((targetDateInMS - startDateInMS) / (currentDateInMS - startDateInMS)) * 100;\r\n\r\n    return percentage;\r\n  }\r\n\r\n  percentageIntoDate = (percentage) => {\r\n    let startDateInMS = this.state.startDate.getTime();\r\n    let currentDateInMS = this.state.currentDate.getTime();\r\n\r\n    let inMS = ((percentage / 100) * (currentDateInMS - startDateInMS)) + startDateInMS;\r\n\r\n    let result = new Date(inMS);\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='grid-container'>\r\n        {this.renderMap()}\r\n        <div className='item2'>\r\n          {this.renderCurrentPatient()}\r\n        </div>\r\n        <div className='item3'>\r\n          <ul>\r\n            {this.renderPatientList()}\r\n          </ul>\r\n        </div>\r\n        <div className='item4'>\r\n          <button onClick={this.handlePlay}>\r\n            Play\r\n          </button>\r\n          <button onClick={this.handlePause}>\r\n            Pause\r\n          </button>\r\n        </div>\r\n        <div className='item5'>\r\n          <Slider\r\n            min = {0}\r\n            max = {100}\r\n            value = {this.state.progress}\r\n            tooltip = {false}\r\n            orientation = \"horizontal\"\r\n            onChange = {this.handleOnChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-rangeslider/lib/index.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}