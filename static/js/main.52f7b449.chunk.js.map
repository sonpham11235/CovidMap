{"version":3,"sources":["Components/PatientMarker.js","Components/Patient.js","Components/NavButton.js","Components/PatientMap.js","Components/Chart.js","Components/Statistic.js","App.js","serviceWorker.js","index.js"],"names":["PatientMarkers","i","position","this","props","patientData","lat","lng","Marker","Popup","name","address","verifyDate","note","markers","Date","length","getTime","targetDate","push","renderMarker","renderAllMarkers","React","Component","Patient","className","onClick","patientName","NavButton","to","PatientMap","handleOnChange","percentage","date","percentageIntoDate","setState","progress","handlePlay","console","log","isPlaying","handlePause","dateIntoPercentage","startDateInMS","state","startDate","currentDateInMS","currentDate","centerPos","currentPatient","fetch","then","res","json","data","sort","a","b","Map","center","zoom","TileLayer","url","attribution","PatientMarker","slice","patientList","handleClick","patient","fetchPatientInfo","interval","setInterval","tick","clearInterval","renderMap","renderCurrentPatient","renderPatientList","min","max","value","tooltip","orientation","onChange","Chart","dataPoints","days","toString","labels","prepDataLabels","datasets","label","label1","backgroundColor","confirmedCases","label2","suspectCases","label3","curedCases","responsive","options","prepOptions","prepChart","Statistic","vnData","worldData","active","keys","Object","day","values","cured","fetchVNData","fetchWorldData","prepareVNDataCC","prepareVNDataSC","prepareVNDataCured","prepareWorldDataCC","prepareWorldDataSC","prepareWorldDataCured","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52f7b449.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Marker, Popup} from 'react-leaflet';\r\n\r\nclass PatientMarkers extends React.Component {\r\n    renderMarker(i) {\r\n        const position = [this.props.patientData[i].lat, this.props.patientData[i].lng];\r\n\r\n        return (\r\n            <Marker position={position}>\r\n                <Popup>\r\n                    <b>Tên: </b> {this.props.patientData[i].name} <br/>\r\n                    <b>Địa chỉ: </b> {this.props.patientData[i].address} <br/>\r\n                    <b>Ngày phát hiện: </b> {this.props.patientData[i].verifyDate} <br/>\r\n                    <b>Ghi chú: </b> {this.props.patientData[i].note} <br/>\r\n                </Popup>\r\n            </Marker>\r\n        );\r\n    }\r\n\r\n    renderAllMarkers() {\r\n        let markers = [];\r\n        let verifyDate = new Date();\r\n        const patientData = this.props.patientData;\r\n\r\n        for (let i = 0; i < patientData.length; i++) {\r\n            verifyDate = new Date(patientData[i].verifyDate);\r\n\r\n            if (verifyDate.getTime() < this.props.targetDate) {\r\n                markers.push(this.renderMarker(i));\r\n            }\r\n        }\r\n\r\n        return markers;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.renderAllMarkers()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PatientMarkers;","import React from 'react';\r\n\r\nfunction Patient(props) {\r\n    return (\r\n        <li>\r\n            <button className='btn-patient' onClick={props.onClick}>\r\n                {props.patientName}\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Patient;","import {Link} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nclass NavButton extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className='item6'>\r\n                <Link to=\"/map\">\r\n                    <button className='switch-button'>\r\n                        Covid Map\r\n                    </button>\r\n                </Link>\r\n                <Link to=\"/stats\">\r\n                    <button className='switch-button'>\r\n                        Covid Stats\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavButton;","import React from 'react';\r\nimport { Map, TileLayer } from 'react-leaflet'\r\nimport PatientMarkers from './PatientMarker'\r\nimport Patient from './Patient'\r\nimport Slider from 'react-rangeslider'\r\nimport NavButton from './NavButton'\r\n\r\nclass PatientMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            patientData: [],\r\n            centerPos: [10.776530, 106.700981],\r\n            currentPatient: null,\r\n            progress: 100,\r\n            startDate: new Date(2019, 12, 8),\r\n            currentDate: new Date(),\r\n            targetDate: new Date(),\r\n            isPlaying: false,\r\n        };\r\n    }\r\n    \r\n    fetchPatientInfo() {\r\n        fetch('https://cors-anywhere.herokuapp.com/https://maps.vnpost.vn/apps/covid19/api/patientapi/list')\r\n          .then(res => res.json())\r\n          .then(json => {\r\n            this.setState({\r\n              patientData: json.data.sort((a,b) => (new Date(a.verifyDate).getTime()) > (new Date(b.verifyDate).getTime()))\r\n            });\r\n          });\r\n    }\r\n    \r\n      renderMap() {\r\n        let targetDate = this.percentageIntoDate(this.state.progress);\r\n    \r\n        const map = (\r\n          <Map center={this.state.centerPos} zoom={13} className='item1'>\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n            <PatientMarkers\r\n              patientData = {this.state.patientData}\r\n              targetDate = {targetDate}\r\n            />\r\n          </Map>\r\n        );\r\n    \r\n        return map;\r\n      }\r\n    \r\n    renderPatientList() {\r\n        const patientData = this.state.patientData.slice();\r\n        const percentage = this.state.progress;\r\n    \r\n        let patientList = [];\r\n        let targetDate = this.percentageIntoDate(percentage);\r\n        let verifyDate = new Date();\r\n    \r\n        for (let i = 0; i < patientData.length; i++) {\r\n          verifyDate = new Date(patientData[i].verifyDate);\r\n    \r\n          if (verifyDate < targetDate) {\r\n            patientList.push(\r\n                <Patient\r\n                    patientName={patientData[i].name}\r\n                    onClick={() => this.handleClick(patientData[i])}\r\n                    />\r\n            )\r\n          }\r\n        }\r\n    \r\n        return patientList;\r\n    }\r\n    \r\n    handleClick(patient) {\r\n        this.setState({\r\n            centerPos: [patient.lat, patient.lng],\r\n            currentPatient: patient,\r\n        })\r\n    }\r\n    \r\n    renderCurrentPatient() {\r\n        const patient = this.state.currentPatient;\r\n    \r\n        if (this.state.currentPatient != null) {\r\n          return (\r\n            <div>\r\n                <b>Tên: </b> {patient.name} <br/>\r\n                <b>Địa chỉ: </b> {patient.address} <br/>\r\n                <b>Ngày phát hiện: </b> {patient.verifyDate} <br/>\r\n                <b>Ghi chú: </b> {patient.note} <br/>\r\n            </div>\r\n          )\r\n        } else {\r\n          return (\r\n            <div>\r\n                <b>Tên: </b> <span> </span> <br/>\r\n                <b>Địa chỉ: </b> <span> </span> <br/>\r\n                <b>Ngày phát hiện: </b> <span> </span> <br/>\r\n                <b>Ghi chú: </b> <span> </span> <br/>\r\n            </div>\r\n          )\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (percentage) => {\r\n        let date  = this.percentageIntoDate();\r\n    \r\n        this.setState({\r\n          progress: percentage,\r\n          targetDate: date,\r\n        })\r\n    }\r\n    \r\n    handlePlay = () => {\r\n        console.log(\"play\")\r\n    \r\n        this.setState({\r\n          isPlaying: true,\r\n          progress: 0,\r\n        })\r\n    }\r\n    \r\n    handlePause = () => {\r\n        console.log(\"pause\")\r\n        this.setState({\r\n          isPlaying: false,\r\n        })\r\n    }\r\n    \r\n    tick() {\r\n        if (this.state.isPlaying) {\r\n          this.setState({\r\n            progress: this.state.progress + 1,\r\n          })\r\n        }\r\n    \r\n        if (this.state.progress >= 100) {\r\n          this.setState({\r\n            progress: 100,\r\n            isPlaying: false,\r\n          })\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.fetchPatientInfo();\r\n        this.interval = setInterval(() => this.tick(), 500);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    \r\n    dateIntoPercentage = (date) => {\r\n        let startDateInMS = this.state.startDate.getTime();\r\n        let currentDateInMS = this.state.currentDate.getTime();\r\n    \r\n        let targetDateInMS = date.getTime();\r\n        let percentage = ((targetDateInMS - startDateInMS) / (currentDateInMS - startDateInMS)) * 100;\r\n    \r\n        return percentage;\r\n    }\r\n    \r\n    percentageIntoDate = (percentage) => {\r\n        let startDateInMS = this.state.startDate.getTime();\r\n        let currentDateInMS = this.state.currentDate.getTime();\r\n    \r\n        let inMS = ((percentage / 100) * (currentDateInMS - startDateInMS)) + startDateInMS;\r\n    \r\n        let result = new Date(inMS);\r\n        return result;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='grid-container'>\r\n                <NavButton />\r\n                {this.renderMap()}\r\n                <div className='item2'>\r\n                    {this.renderCurrentPatient()}\r\n                </div>\r\n                <div className='item3'>\r\n                <ul>\r\n                    {this.renderPatientList()}\r\n                </ul>\r\n                </div>\r\n                <div className='item4'>\r\n                  <button className='switch-button' onClick={this.handlePlay}>\r\n                      Play\r\n                  </button>\r\n                  <button className='switch-button' onClick={this.handlePause}>\r\n                      Pause\r\n                  </button>\r\n                </div>\r\n                <div className='item5'>\r\n                <Slider\r\n                    min = {0}\r\n                    max = {100}\r\n                    value = {this.state.progress}\r\n                    tooltip = {false}\r\n                    orientation = \"horizontal\"\r\n                    onChange = {this.handleOnChange}\r\n                />\r\n                </div>\r\n            </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default PatientMap;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass Chart extends React.Component {\r\n    prepDataLabels() {\r\n        let dataPoints = [];\r\n\r\n        for (let i = 0; i < this.props.days; i++) {\r\n            dataPoints.push(i.toString());\r\n        }\r\n\r\n        return dataPoints;\r\n    }\r\n\r\n    prepChart() {\r\n        const data = {\r\n            labels: this.prepDataLabels(),\r\n            datasets: [\r\n                {\r\n                    label: this.props.label1,\r\n                    backgroundColor: \"rgba(255, 0, 255, 0.75)\",\r\n                    data: this.props.confirmedCases,\r\n                },\r\n                {\r\n                    label: this.props.label2,\r\n                    backgroundColor: \"rgba(255, 255, 0, 0.75)\",\r\n                    data: this.props.suspectCases,\r\n                },\r\n                {\r\n                    label: this.props.label3,\r\n                    backgroundColor: \"rgba(0, 255, 255, 0.75)\",\r\n                    data: this.props.curedCases,\r\n                },\r\n            ]\r\n        };\r\n\r\n        return data;\r\n    }\r\n\r\n    prepOptions() {\r\n        const options = {\r\n            responsive: true,\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart-container\">\r\n                <Line\r\n                    options={this.prepOptions()}\r\n                    data={this.prepChart()}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React from 'react'\r\nimport NavButton from './NavButton'\r\nimport Chart from './Chart'\r\n\r\nclass Statistic extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            vnData: [],\r\n            worldData: [],\r\n            active: false,\r\n        }\r\n    }\r\n\r\n    fetchVNData() {\r\n        fetch('https://cors-anywhere.herokuapp.com/https://td.fpt.ai/corona/corona-chart-vn.json')\r\n          .then(res => res.json())\r\n          .then(json => {\r\n            let vnData = this.state.vnData;\r\n            let keys = Object.keys(json);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n              let day = Object.values(json)[i];\r\n              vnData.push(day);\r\n            }\r\n\r\n            this.setState({\r\n              vnData: vnData,\r\n            });\r\n        });\r\n    }\r\n\r\n    fetchWorldData() {\r\n        fetch('https://cors-anywhere.herokuapp.com/https://td.fpt.ai/corona/corona-total.json')\r\n          .then(res => res.json())\r\n          .then(json => {\r\n            let worldData = this.state.worldData;\r\n            let keys = Object.keys(json);\r\n\r\n            for (let i = 0; i < keys.length; i++) {\r\n              let day = Object.values(json)[i];\r\n              worldData.push(day);\r\n            }\r\n\r\n            this.setState({\r\n              worldData: worldData,\r\n            });\r\n        });\r\n    }\r\n\r\n    prepareVNDataCC() {\r\n      let confirmedCases = []\r\n      const vnData = this.state.vnData;\r\n\r\n      for (let i = 0; i < vnData.length; i++) {\r\n        confirmedCases.push(vnData[i][0]);\r\n      }\r\n\r\n      return confirmedCases;\r\n    }\r\n\r\n    prepareVNDataSC() {\r\n      let suspectCases = []\r\n      const vnData = this.state.vnData;\r\n\r\n      for (let i = 0; i < vnData.length; i++) {\r\n        suspectCases.push(vnData[i][1]);\r\n      }\r\n\r\n      return suspectCases;\r\n    }\r\n\r\n    prepareVNDataCured() {\r\n      let cured = []\r\n      const vnData = this.state.vnData;\r\n\r\n      for (let i = 0; i < vnData.length; i++) {\r\n        cured.push(vnData[i][2]);\r\n      }\r\n\r\n      return cured;\r\n    }\r\n\r\n    prepareWorldDataCC() {\r\n      let confirmedCases = []\r\n      const worldData = this.state.worldData;\r\n\r\n      for (let i = 0; i < worldData.length; i++) {\r\n        confirmedCases.push(worldData[i][0]);\r\n      }\r\n\r\n      return confirmedCases;\r\n    }\r\n\r\n    prepareWorldDataSC() {\r\n      let suspectCases = []\r\n      const worldData = this.state.worldData;\r\n\r\n      for (let i = 0; i < worldData.length; i++) {\r\n        suspectCases.push(worldData[i][1]);\r\n      }\r\n\r\n      return suspectCases;\r\n    }\r\n\r\n    prepareWorldDataCured() {\r\n      let cured = []\r\n      const worldData = this.state.worldData;\r\n\r\n      for (let i = 0; i < worldData.length; i++) {\r\n        cured.push(worldData[i][2]);\r\n      }\r\n\r\n      return cured;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchVNData();\r\n        this.fetchWorldData();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n          <div className=\"statistic-container\">\r\n              <NavButton />\r\n              <div className=\"VnChart\">\r\n                <Chart\r\n                  days={this.state.vnData.length}\r\n                  confirmedCases={this.prepareVNDataCC()}\r\n                  suspectCases={this.prepareVNDataSC()}\r\n                  curedCases={this.prepareVNDataCured()}\r\n                  label1=\"Confirmed Cases\"\r\n                  label2=\"Suspects Cases\"\r\n                  label3=\"Recovered Cases\"\r\n                />\r\n              </div>\r\n              <div className=\"GlobalChart\">\r\n                <Chart\r\n                  days={this.state.worldData.length}\r\n                  confirmedCases={this.prepareWorldDataCC()}\r\n                  suspectCases={this.prepareWorldDataSC()}\r\n                  curedCases={this.prepareWorldDataCured()}\r\n                  label1=\"Confirmed Cases\"\r\n                  label2=\"Deaths\"\r\n                  label3=\"Recovered Cases\"\r\n                />\r\n              </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Statistic;","import React from 'react';\r\nimport './App.css';\r\nimport PatientMap from './Components/PatientMap';\r\nimport Statistic from './Components/Statistic';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return(\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/CovidMap\" exact>\r\n            <PatientMap />\r\n          </Route>\r\n          <Route path=\"/map\">\r\n            <PatientMap />\r\n          </Route>\r\n          <Route path=\"/stats\">\r\n            <Statistic />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'react-rangeslider/lib/index.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}